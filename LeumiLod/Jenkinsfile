pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: '*/main']], 
                    userRemoteConfigs: [[url: 'https://github.com/Guy-BP/projects']]
                ])
            }
        }

        stage('Setup') {
            steps {
                script {
                    // Create necessary directories and download files
                    sh '''
                    mkdir -p /var/jenkins_home/workspace/BankLeumiApp/docker
                    mkdir -p /var/jenkins_home/workspace/BankLeumiApp/kubectl

                    # Download Docker and extract
                    curl -L https://download.docker.com/linux/static/stable/x86_64/docker-20.10.12.tgz -o /var/jenkins_home/workspace/BankLeumiApp/docker/docker.tgz
                    tar xz -C /var/jenkins_home/workspace/BankLeumiApp/docker --strip-components=1 -f /var/jenkins_home/workspace/BankLeumiApp/docker/docker.tgz
                    rm /var/jenkins_home/workspace/BankLeumiApp/docker/docker.tgz

                    # Download kubectl and install
                    curl -LO https://dl.k8s.io/release/v1.27.0/bin/linux/amd64/kubectl
                    chmod +x kubectl
                    mv kubectl /usr/local/bin/
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                /var/jenkins_home/workspace/BankLeumiApp/docker/docker build -t my-image:latest .
                '''
            }
        }

        stage('Start Minikube') {
            steps {
                sh '''
                minikube start --driver=docker
                '''
            }
        }

        stage('Deploy to Minikube') {
            steps {
                sh '''
                kubectl apply -f kubernetes/deployment.yaml
                kubectl apply -f kubernetes/service.yaml
                '''
            }
        }

        stage('Expose Service') {
            steps {
                sh '''
                kubectl expose deployment my-deployment --type=LoadBalancer --name=my-service
                '''
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
