pipeline {
    agent any

    environment {
        DOCKER_CLI_VERSION = '20.10.12'
        KUBECTL_VERSION = '1.27.0'
        MINIKUBE_VERSION = '1.27.0'
        HOME_DIR = "${env.WORKSPACE}"
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    // Define paths
                    def dockerBin = "${HOME_DIR}/docker/docker"
                    def kubectlBin = "${HOME_DIR}/kubectl/kubectl"
                    def minikubeBin = "${HOME_DIR}/minikube/minikube"
                    
                    // Install Docker
                    sh """
                        mkdir -p ${HOME_DIR}/docker
                        curl -L https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_CLI_VERSION}.tgz | tar xz -C ${HOME_DIR}/docker --strip-components=1
                        export PATH=${HOME_DIR}/docker:$PATH
                        ${dockerBin} --version
                    """
                    
                    // Install kubectl
                    sh """
                        mkdir -p ${HOME_DIR}/kubectl
                        curl -LO "https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        mv kubectl ${HOME_DIR}/kubectl/
                        export PATH=${HOME_DIR}/kubectl:$PATH
                        ${kubectlBin} version --client
                    """
                    
                    // Install Minikube
                    sh """
                        mkdir -p ${HOME_DIR}/minikube
                        curl -LO "https://storage.googleapis.com/minikube/releases/v${MINIKUBE_VERSION}/minikube-linux-amd64"
                        chmod +x minikube-linux-amd64
                        mv minikube-linux-amd64 ${HOME_DIR}/minikube/minikube
                        export PATH=${HOME_DIR}/minikube:$PATH
                        ${minikubeBin} version
                    """
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh """
                        export PATH=${HOME_DIR}/docker:$PATH
                        docker build -t flask-app .
                    """
                }
            }
        }
        
        stage('Start Minikube') {
            steps {
                script {
                    // Start Minikube
                    sh """
                        export PATH=${HOME_DIR}/minikube:$PATH
                        minikube start --driver=none
                    """
                }
            }
        }
        
        stage('Deploy to Minikube') {
            steps {
                script {
                    // Deploy the Flask app
                    sh """
                        export PATH=${HOME_DIR}/kubectl:$PATH
                        kubectl create deployment flask-app --image=flask-app
                        kubectl expose deployment flask-app --type=NodePort --port=443
                    """
                }
            }
        }

        stage('Expose Service') {
            steps {
                script {
                    // Get Minikube service URL and print it
                    sh """
                        export PATH=${HOME_DIR}/kubectl:$PATH
                        minikube service flask-app --url
                    """
                }
            }
        }
    }
}
