pipeline {
    agent any

    stages {
        stage('Setup') {
            steps {
                script {
                    // Create necessary directories
                    sh 'mkdir -p /var/jenkins_home/workspace/BankLeumiApp/docker'
                    sh 'mkdir -p /var/jenkins_home/workspace/BankLeumiApp/kubectl'

                    // Download Docker binary
                    sh '''
                    curl -L https://download.docker.com/linux/static/stable/x86_64/docker-20.10.12.tgz -o docker.tgz
                    tar xz -C /var/jenkins_home/workspace/BankLeumiApp/docker --strip-components=1 < docker.tgz
                    rm docker.tgz
                    '''

                    // Download kubectl binary
                    sh '''
                    curl -LO https://dl.k8s.io/release/v1.27.0/bin/linux/amd64/kubectl
                    mv kubectl /var/jenkins_home/workspace/BankLeumiApp/kubectl/
                    chmod +x /var/jenkins_home/workspace/BankLeumiApp/kubectl/kubectl
                    '''

                    // Set PATH environment variable
                    sh '''
                    export PATH=/var/jenkins_home/workspace/BankLeumiApp/docker:/var/jenkins_home/workspace/BankLeumiApp/kubectl:$PATH
                    '''

                    // Verify installations
                    sh '/var/jenkins_home/workspace/BankLeumiApp/docker/docker --version'
                    sh '/var/jenkins_home/workspace/BankLeumiApp/kubectl/kubectl version --client'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh '''
                    /var/jenkins_home/workspace/BankLeumiApp/docker/docker build -t my-image:latest .
                    '''
                }
            }
        }

        stage('Start Minikube') {
            steps {
                script {
                    // Start Minikube
                    sh '''
                    minikube start --driver=none
                    '''
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                script {
                    // Deploy application to Minikube
                    sh '''
                    kubectl apply -f deployment.yaml
                    '''
                }
            }
        }

        stage('Expose Service') {
            steps {
                script {
                    // Expose service in Minikube
                    sh '''
                    kubectl expose deployment my-deployment --type=NodePort --name=my-service
                    '''
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }
    }
}
