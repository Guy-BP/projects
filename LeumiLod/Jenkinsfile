pipeline {
    agent any

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Setup Docker and Minikube') {
            steps {
                script {
                    // Check if Docker is installed and running
                    def dockerInstalled = sh(script: 'command -v docker', returnStatus: true)
                    if (dockerInstalled != 0) {
                        echo 'Docker not found. Installing Docker...'
                        sh '''
                        curl -LO https://download.docker.com/linux/static/stable/x86_64/docker-20.10.24.tgz
                        mkdir -p /var/jenkins_home/workspace/BankLeumiApp/docker
                        tar xzvf docker-20.10.24.tgz -C /var/jenkins_home/workspace/BankLeumiApp/docker --strip-components=1
                        export PATH=/var/jenkins_home/workspace/BankLeumiApp/docker:$PATH
                        '''
                    }

                    // Start Docker daemon if not already running
                    sh '''
                    if ! pgrep -x "dockerd" > /dev/null; then
                        nohup /var/jenkins_home/workspace/BankLeumiApp/docker/dockerd > /var/log/docker.log 2>&1 &
                        sleep 10
                    fi
                    '''

                    // Start Minikube if not running
                    sh 'minikube start || echo "Minikube already running"'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t my-image:latest .'
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                script {
                    // Use Minikube's Docker daemon to avoid pushing to an external registry
                    sh 'eval $(minikube docker-env)'

                    // Deploy using kubectl without external YAML
                    sh '''
                    kubectl run my-app --image=my-image:latest --port=443
                    kubectl expose pod my-app --type=ClusterIP --port=443 --target-port=443
                    '''

                    // Forward the port from Minikube to localhost
                    sh 'kubectl port-forward pod/my-app 443:443 &'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
